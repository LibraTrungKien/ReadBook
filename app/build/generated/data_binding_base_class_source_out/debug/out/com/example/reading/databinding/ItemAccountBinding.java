// Generated by view binder compiler. Do not edit!
package com.example.reading.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.daimajia.swipe.SwipeLayout;
import com.example.reading.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAccountBinding implements ViewBinding {
  @NonNull
  private final SwipeLayout rootView;

  @NonNull
  public final LinearLayout btnRemoveAccount;

  @NonNull
  public final ImageView imgUser;

  @NonNull
  public final TextView txtPermission;

  @NonNull
  public final TextView txtPhoneNumber;

  @NonNull
  public final TextView txtUserName;

  private ItemAccountBinding(@NonNull SwipeLayout rootView, @NonNull LinearLayout btnRemoveAccount,
      @NonNull ImageView imgUser, @NonNull TextView txtPermission, @NonNull TextView txtPhoneNumber,
      @NonNull TextView txtUserName) {
    this.rootView = rootView;
    this.btnRemoveAccount = btnRemoveAccount;
    this.imgUser = imgUser;
    this.txtPermission = txtPermission;
    this.txtPhoneNumber = txtPhoneNumber;
    this.txtUserName = txtUserName;
  }

  @Override
  @NonNull
  public SwipeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAccountBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAccountBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_account, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAccountBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnRemoveAccount;
      LinearLayout btnRemoveAccount = ViewBindings.findChildViewById(rootView, id);
      if (btnRemoveAccount == null) {
        break missingId;
      }

      id = R.id.imgUser;
      ImageView imgUser = ViewBindings.findChildViewById(rootView, id);
      if (imgUser == null) {
        break missingId;
      }

      id = R.id.txtPermission;
      TextView txtPermission = ViewBindings.findChildViewById(rootView, id);
      if (txtPermission == null) {
        break missingId;
      }

      id = R.id.txtPhoneNumber;
      TextView txtPhoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (txtPhoneNumber == null) {
        break missingId;
      }

      id = R.id.txtUserName;
      TextView txtUserName = ViewBindings.findChildViewById(rootView, id);
      if (txtUserName == null) {
        break missingId;
      }

      return new ItemAccountBinding((SwipeLayout) rootView, btnRemoveAccount, imgUser,
          txtPermission, txtPhoneNumber, txtUserName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
